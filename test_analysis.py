import os
import json
import subprocess
import asyncio
import openai
from fpdf import FPDF
# Diret√≥rio onde os testes Cypress est√£o localizados
TESTS_FOLDER = "./joavn-api/src/test/integration/"

# Diret√≥rio onde o relat√≥rio ser√° salvo
OUTPUT_FOLDER = "./joavn-api/src/test/integration/cypress/e2e/api"
REPORT_PATH = f"{OUTPUT_FOLDER}/relatorio_testes.pdf"

# OpenAI API Key (se necess√°rio)
openai.api_key =""

def is_cypress_installed():
    """Verifica se o Cypress est√° instalado e acess√≠vel."""
    try:
        subprocess.run(["npx", "cypress", "-v"], capture_output=True, text=True, check=True)
        return True
    except subprocess.CalledProcessError:
        return False
    except FileNotFoundError:
        return False

def run_cypress_tests():
    """Executa os testes do Cypress no diret√≥rio correto e captura os resultados."""
    print("üîÑ Executando testes do Cypress...")

    # Verifica se o Cypress est√° instalado
    if not is_cypress_installed():
        print("‚ùå Cypress n√£o encontrado! Certifique-se de que ele est√° instalado via `npm install cypress --save-dev`.")
        return None

    result_file = f"{OUTPUT_FOLDER}/cypress_results.json"
    os.makedirs(OUTPUT_FOLDER, exist_ok=True)

    command = ["npx", "cypress", "run", "--reporter", "json"]

    try:
        # Executa o Cypress no diret√≥rio correto e captura a sa√≠da
        result = subprocess.run(
            command,
            cwd=os.path.abspath(TESTS_FOLDER),  # Caminho absoluto evita erro de diret√≥rio
            capture_output=True,
            text=True,
            check=True
        )

        # Salva a sa√≠da JSON no arquivo de resultados
        with open(result_file, "w", encoding="utf-8") as file:
            file.write(result.stdout)

        print("‚úÖ Testes Cypress executados com sucesso.")
        return result_file

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar Cypress: {e.stderr}")
        return None
    except FileNotFoundError:
        print("‚ùå Erro: Cypress n√£o encontrado no sistema.")
        return None

async def main():
    """Executa os testes, analisa os resultados e gera o relat√≥rio final."""
    result_file = run_cypress_tests()
    if not result_file:
        print("‚ùå Cypress falhou. Abortando gera√ß√£o do relat√≥rio.")
        return

    print("‚úÖ Processo conclu√≠do com sucesso.")

if __name__ == "__main__":
    asyncio.run(main())
